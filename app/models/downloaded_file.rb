require 'rmt/checksum_verifier'

##
# This class represents a downloaded file in the database for deduplication.
#
# Notes:
#
# * The checksum type and checksum are unique indexes to ensure that there can only be one source file.
# * When looking for a file by checksum type and checksum, the found local file is verified to ensure data
#   integrity.
# * If any error is encountered, it's ignored and the program will pretend that a previously downloaded file does not
#   exist.
class DownloadedFile < ApplicationRecord

  ##
  # Notes a file by checksum type and checksum in the database.
  #
  # Notes:
  #
  # * If any error is encountered, the program will move on. The next added file of the same checksum can
  #   then try to be the source of deduplication.
  #
  # Params:
  # +checksum_type+:: The type of checksum (MD5, SHA256, ...)
  # +checksum+:: The checksum hex generated by a checksum algorithm.
  # +local_path+:: The source file's local path.
  def self.add_file!(checksum_type, checksum, local_path)
    DownloadedFile.create({ checksum_type: checksum_type,
                            checksum: checksum,
                            local_path: local_path })
  rescue StandardError => e
    # de-duplication is not critical, just move on
    logger.error e.message
    logger.error e.backtrace.each { |line| logger.error line }
  end

  ##
  # Gets the local path of an already downloaded file by checksum type and checksum.
  #
  # Notes:
  #
  # * The checksum of the source file is verified to prevent data integrity issues (corrupted files deduplicated).
  # * If any error is encountered, this method will return nil and ignore that there was a previous source.
  #
  # Params:
  # +checksum_type+:: The type of checksum (MD5, SHA256, ...)
  def self.get_local_path_by_checksum(checksum_type, checksum)
    file = DownloadedFile.find_by({ checksum_type: checksum_type,
                                    checksum: checksum })
    return nil unless file
    RMT::ChecksumVerifier.verify_checksum(checksum_type, checksum, file.local_path)
    file.local_path
  rescue StandardError => e
    # de-duplication is not critical, just return nil to download again
    logger.error e.message
    logger.error e.backtrace.each { |line| logger.error line }
    nil
  end

end
